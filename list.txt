1 判断两个线段相交
	max(a.begin, b.begin) ~ min(a.end, b.end)
2 判断两个矩形相交
3 判断矩形和圆相交
4 精度问题(10-6) 
	round(a * b * 1e6 / c)/1e6
5 qs
qs( vector<int>& v, int a, int b) {
	int l = a-1, r = b+1, m = v[(a+b)/2];
	while(l <r) {
		do l++; while(v[l] < m);
		do r--; while(v[r] > m);
		if(l <r) swap(v[l], v[r]);
	}
	qs(v, a, r);
	qs(v, r+1,b);	
}
6 ms
ms( vector<int>& v, vector<int>& tm, int f, int t) {
	if(f >= t) return;
	int m = (f + t ) >> 1;
	ms(v, tm, f, m);
	ms(v, tm, m+1, t);
	int k = f, l = f, r = m+1;
	while(l <= m && r <= t) {
		if(v[l] < v[r]) tm[k++] = v[l++];
		else tm[k++] = v[r++];
	}
	while(l <=m) tm[k++] = v[l++];
	while(r<=t) tm[k++] = v[r++];
	for(int i = f; i<=t; i++) v[i] = tm[i];
}

7 比较指针
struct Cm {
    bool operator() (const Node* a, const Node* b) const {
        return a->time < b->time;
    }
};
priority_queue<Node*, vector<Node*>, Cm> q;

struct cmp{
	bool operator()(Node a, Node b){
		if(a.x == b.x)	return a.y>b.y;
		return a.x>b.x;
	}
};
priority_quue<Node, vecotr<Node> cmp> q;

8 priority_queue 默认是大顶堆 less<int>  降序排列; greater<int> 升序排列，小顶堆

9 b_search
int bsearch(int l,int r)
{
	while(l<=r)
	{
		int mid = l+r >>1;
		if(chekc(mid))r=mid-1;
		else l = mid + 1;
	}
	return l - 1;
}

//[l m] [m+1, r]
int bsearch(int l, int r) {
	while(l < r) {
		int m = l + r >> 1;
		if(check(m)) r = m;
		else l = m + 1;	
	}
	return l;
}
//[l, m-1][m, r]
int bsearch(int l, int r) {
	while(l < r) {
		int m = l + r + 1 >> 1;
		if(check(m)) r = m -1;
		else l = m;
	}
	return l;
}

10 链表 快慢指针 确定最后多少个，中间node等

11 并查集
//https://zhuanlan.zhihu.com/c_1182444932760125440
//https://zhuanlan.zhihu.com/p/93647900
int fa[];
int rank[]; //记录每个根节点对应的树的深度（如果不是根节点，其rank相当于以它作为根节点的子树的深度）
void init() {
	for(int i = 0;i < n;i ++) {
	    fa[i] = i;
	    rank[i] = 1;
	}
}
int find(int i ) {
	return i == fa[i] ? i : (fa[i] = find(fa[i]));
}

int merge(int i, int j) {
	int l = find(i), m = find(j);
	if(rank[l] >= rank[m]) {
		fa[m] = l;
	} else {
		fa[l] = m;
	}
	if(rank[l] == rank[m] && l != m) {
		rank[l] ++;
	}
}
